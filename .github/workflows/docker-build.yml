name: Docker Build and Push

on:
  # ÈÄöËøátagËß¶ÂèëÔºåÊ†ºÂºè‰∏∫ v*
  push:
    tags:
      - 'v*'
  
  # ÊîØÊåÅÊâãÂä®Ëß¶Âèë
  workflow_dispatch:
    inputs:
      push_to_dockerhub:
        description: 'ÊòØÂê¶Êé®ÈÄÅÂà∞DockerHub'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      custom_tag:
        description: 'Ëá™ÂÆö‰πâÊ†áÁ≠æÔºàÂèØÈÄâÔºâ'
        required: false
        type: string

env:
  DOCKERHUB_NAMESPACE: lihongjie0209
  IMAGE_NAME: veri-text

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout‰ª£Á†Å
      uses: actions/checkout@v4
      
    - name: ËÆæÁΩÆDocker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: ÁôªÂΩïDockerHub
      if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: ÊèêÂèñÂÖÉÊï∞ÊçÆ
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          # TagËß¶Âèë: v1.0.0 -> 1.0.0, latest
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # ‰∏ªÂàÜÊîØ: main -> main
          type=ref,event=branch
          # PR: pr-123
          type=ref,event=pr
          # ÊâãÂä®Ëß¶ÂèëËá™ÂÆö‰πâÊ†áÁ≠æ
          type=raw,value={{inputs.custom_tag}},enable=${{ github.event.inputs.custom_tag != '' }}
          # latestÊ†áÁ≠æ‰ªÖÂØπtagÂíåmainÂàÜÊîØ
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
        labels: |
          org.opencontainers.image.title=ÊïèÊÑüËØçÊ£ÄÊµãÊúçÂä°
          org.opencontainers.image.description=Âü∫‰∫éYAMLÈÖçÁΩÆÁöÑÊô∫ËÉΩÊïèÊÑüËØçÊ£ÄÊµãAPIÊúçÂä°
          org.opencontainers.image.vendor=lihongjie0209
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
    
    - name: ÊûÑÂª∫ÂíåÊé®ÈÄÅDockerÈïúÂÉè
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
    
    - name: ÊûÑÂª∫ÊëòË¶Å
      run: |
        echo "## üê≥ DockerÊûÑÂª∫ÁªìÊûú" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| È°πÁõÆ | ÂÄº |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
        echo "| üè∑Ô∏è Ëß¶ÂèëÊñπÂºè | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üì¶ ÈïúÂÉèÂêçÁß∞ | \`${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| üèóÔ∏è ÊûÑÂª∫Âπ≥Âè∞ | linux/amd64, linux/arm64 |" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true' }}" == "true" ]]; then
          echo "| üöÄ Êé®ÈÄÅÁä∂ÊÄÅ | ‚úÖ Â∑≤Êé®ÈÄÅÂà∞DockerHub |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üöÄ Êé®ÈÄÅÁä∂ÊÄÅ | ‚è∏Ô∏è ‰ªÖÊûÑÂª∫ÔºåÊú™Êé®ÈÄÅ |" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üè∑Ô∏è ÁîüÊàêÁöÑÊ†áÁ≠æ:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.meta.outputs.tags }}' | sed 's/,/\n/g' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    - name: ÂÆâÂÖ®Êâ´Êèè
      if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true'
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        only-severities: critical,high
        exit-code: false # ‰∏çÂõ†ÂÆâÂÖ®ÈóÆÈ¢òÈòªÊ≠¢ÂèëÂ∏É

  test-image:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true'
    
    steps:
    - name: ÊèêÂèñÂÖÉÊï∞ÊçÆ
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=ref,event=branch
          type=raw,value={{inputs.custom_tag}},enable=${{ github.event.inputs.custom_tag != '' }}
    
    - name: ÊµãËØïDockerÈïúÂÉè
      run: |
        # Ëé∑ÂèñÁ¨¨‰∏Ä‰∏™Ê†áÁ≠æÁî®‰∫éÊµãËØï
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "ÊµãËØïÈïúÂÉè: $IMAGE_TAG"
        
        # ÂêØÂä®ÂÆπÂô®
        docker run -d --name test-container -p 8080:8000 \
          -e GUNICORN_WORKERS=1 \
          -e GUNICORN_TIMEOUT=60 \
          $IMAGE_TAG
        
        # Á≠âÂæÖÊúçÂä°ÂêØÂä®
        sleep 30
        
        # ÂÅ•Â∫∑Ê£ÄÊü•
        echo "ÊâßË°åÂÅ•Â∫∑Ê£ÄÊü•..."
        response=$(curl -s -w "%{http_code}" http://localhost:8080/api/v1/health/)
        http_code=${response: -3}
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ ÂÅ•Â∫∑Ê£ÄÊü•ÈÄöËøá"
        else
          echo "‚ùå ÂÅ•Â∫∑Ê£ÄÊü•Â§±Ë¥•ÔºåHTTPÁä∂ÊÄÅÁ†Å: $http_code"
          docker logs test-container
          exit 1
        fi
        
        # ÂäüËÉΩÊµãËØï
        echo "ÊâßË°åÂäüËÉΩÊµãËØï..."
        test_response=$(curl -s -X POST http://localhost:8080/api/v1/detect/ \
          -H "Content-Type: application/json" \
          -d '{"text":"ËøôÊòØÊµãËØïÊñáÊú¨","config":{"detection_mode":"rule"}}')
        
        if echo "$test_response" | grep -q '"success":true'; then
          echo "‚úÖ ÂäüËÉΩÊµãËØïÈÄöËøá"
        else
          echo "‚ùå ÂäüËÉΩÊµãËØïÂ§±Ë¥•"
          echo "ÂìçÂ∫î: $test_response"
          docker logs test-container
          exit 1
        fi
        
        # Ê∏ÖÁêÜ
        docker stop test-container
        docker rm test-container
        
        echo "üéâ ÈïúÂÉèÊµãËØïÂÆåÊàê"

  release-notification:
    needs: [build-and-push, test-image]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && success()
    
    steps:
    - name: ÂèëÂ∏ÉÈÄöÁü•
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "## üéâ Êñ∞ÁâàÊú¨ÂèëÂ∏ÉÊàêÂäü!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ ÈïúÂÉè‰ø°ÊÅØ" >> $GITHUB_STEP_SUMMARY
        echo "- **ÁâàÊú¨**: \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
        echo "- **ÈïúÂÉè**: \`${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${VERSION#v}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Âπ≥Âè∞**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ ‰ΩøÁî®ÊñπÂºè" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# ÊãâÂèñÊúÄÊñ∞ÁâàÊú¨" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${VERSION#v}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# ËøêË°åÂÆπÂô®" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d -p 8888:8000 \\" >> $GITHUB_STEP_SUMMARY
        echo "  -e GUNICORN_WORKERS=4 \\" >> $GITHUB_STEP_SUMMARY
        echo "  ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${VERSION#v}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  deploy-cloud-run:
    needs: [build-and-push, test-image]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && success()
    
    steps:
    - name: Checkout‰ª£Á†Å
      uses: actions/checkout@v4
    
    - name: ÈÖçÁΩÆGCPË∫´‰ªΩÈ™åËØÅ
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: ËÆæÁΩÆCloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: ÊèêÂèñÁâàÊú¨Âè∑
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "image_uri=${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:$VERSION" >> $GITHUB_OUTPUT
    
    - name: ÈÉ®ÁΩ≤Âà∞Cloud Run
      run: |
        echo "üöÄ ÂºÄÂßãÈÉ®ÁΩ≤Âà∞GCP Cloud Run..."
        
        # ÈÉ®ÁΩ≤Âà∞Cloud Run
        gcloud run deploy ${{ vars.CLOUD_RUN_SERVICE_NAME || 'veri-text' }} \
          --image=${{ steps.version.outputs.image_uri }} \
          --platform=managed \
          --region=${{ vars.GCP_REGION || 'us-central1' }} \
          --allow-unauthenticated \
          --port=8000 \
          --memory=${{ vars.CLOUD_RUN_MEMORY || '1Gi' }} \
          --cpu=${{ vars.CLOUD_RUN_CPU || '1' }} \
          --concurrency=${{ vars.CLOUD_RUN_CONCURRENCY || '80' }} \
          --max-instances=${{ vars.CLOUD_RUN_MAX_INSTANCES || '10' }} \
          --min-instances=${{ vars.CLOUD_RUN_MIN_INSTANCES || '0' }} \
          --timeout=${{ vars.CLOUD_RUN_TIMEOUT || '300' }} \
          --set-env-vars="GUNICORN_WORKERS=${{ vars.GUNICORN_WORKERS || '2' }}" \
          --set-env-vars="GUNICORN_LOG_LEVEL=${{ vars.GUNICORN_LOG_LEVEL || 'info' }}" \
          --set-env-vars="GUNICORN_TIMEOUT=${{ vars.CLOUD_RUN_TIMEOUT || '300' }}" \
          --quiet
        
        echo "‚úÖ Cloud RunÈÉ®ÁΩ≤ÂÆåÊàê"
    
    - name: Ëé∑ÂèñÊúçÂä°URL
      id: service-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ vars.CLOUD_RUN_SERVICE_NAME || 'veri-text' }} \
          --region=${{ vars.GCP_REGION || 'us-central1' }} \
          --format='value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "üåê ÊúçÂä°URL: $SERVICE_URL"
    
    - name: ÂÅ•Â∫∑Ê£ÄÊü•Cloud RunÊúçÂä°
      run: |
        echo "üîç ÊâßË°åCloud RunÊúçÂä°ÂÅ•Â∫∑Ê£ÄÊü•..."
        SERVICE_URL="${{ steps.service-url.outputs.url }}"
        
        # Á≠âÂæÖÊúçÂä°ÂêØÂä®
        sleep 30
        
        # ÂÅ•Â∫∑Ê£ÄÊü•
        response=$(curl -s -w "%{http_code}" "$SERVICE_URL/api/v1/health/")
        http_code=${response: -3}
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Cloud RunÊúçÂä°ÂÅ•Â∫∑Ê£ÄÊü•ÈÄöËøá"
        else
          echo "‚ùå Cloud RunÊúçÂä°ÂÅ•Â∫∑Ê£ÄÊü•Â§±Ë¥•ÔºåHTTPÁä∂ÊÄÅÁ†Å: $http_code"
          echo "ÂìçÂ∫îÂÜÖÂÆπ: ${response%???}"
          exit 1
        fi
        
        # ÂäüËÉΩÊµãËØï
        echo "üß™ ÊâßË°åÂäüËÉΩÊµãËØï..."
        test_response=$(curl -s -X POST "$SERVICE_URL/api/v1/detect/" \
          -H "Content-Type: application/json" \
          -d '{"text":"ËøôÊòØÊµãËØïÊñáÊú¨","config":{"detection_mode":"rule"}}')
        
        if echo "$test_response" | grep -q '"success":true'; then
          echo "‚úÖ Cloud RunÊúçÂä°ÂäüËÉΩÊµãËØïÈÄöËøá"
        else
          echo "‚ùå Cloud RunÊúçÂä°ÂäüËÉΩÊµãËØïÂ§±Ë¥•"
          echo "ÂìçÂ∫î: $test_response"
          exit 1
        fi
        
        echo "üéâ Cloud RunÈÉ®ÁΩ≤È™åËØÅÂÆåÊàê"
    
    - name: ÈÉ®ÁΩ≤ÊÄªÁªì
      run: |
        VERSION=${{ steps.version.outputs.version }}
        SERVICE_URL="${{ steps.service-url.outputs.url }}"
        
        echo "## üåê Cloud RunÈÉ®ÁΩ≤ÊàêÂäü!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã ÈÉ®ÁΩ≤‰ø°ÊÅØ" >> $GITHUB_STEP_SUMMARY
        echo "- **ÁâàÊú¨**: \`v$VERSION\`" >> $GITHUB_STEP_SUMMARY
        echo "- **ÈïúÂÉè**: \`${{ steps.version.outputs.image_uri }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **ÊúçÂä°Âêç**: \`${{ vars.CLOUD_RUN_SERVICE_NAME || 'veri-text' }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Âå∫Âüü**: \`${{ vars.GCP_REGION || 'us-central1' }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **ÊúçÂä°URL**: [$SERVICE_URL]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Âø´ÈÄüËÆøÈóÆ" >> $GITHUB_STEP_SUMMARY
        echo "- [üåê WebÁïåÈù¢]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
        echo "- [üìö APIÊñáÊ°£]($SERVICE_URL/docs)" >> $GITHUB_STEP_SUMMARY
        echo "- [‚ù§Ô∏è ÂÅ•Â∫∑Ê£ÄÊü•]($SERVICE_URL/api/v1/health/)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üß™ ÊµãËØïÂëΩ‰ª§" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# ÂÅ•Â∫∑Ê£ÄÊü•" >> $GITHUB_STEP_SUMMARY
        echo "curl $SERVICE_URL/api/v1/health/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# ÊïèÊÑüËØçÊ£ÄÊµãÊµãËØï" >> $GITHUB_STEP_SUMMARY
        echo "curl -X POST \"$SERVICE_URL/api/v1/detect/\" \\" >> $GITHUB_STEP_SUMMARY
        echo "  -H \"Content-Type: application/json\" \\" >> $GITHUB_STEP_SUMMARY
        echo "  -d '{\"text\":\"ÊµãËØïÊñáÊú¨\",\"config\":{\"detection_mode\":\"rule\"}}'" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
